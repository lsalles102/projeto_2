 Pontos críticos que precisam de ajuste:
1️⃣ Valor inconsistente na API vs SDK Mercado Pago
No createPixPayment, você converte:

ts
Copiar
Editar
const transactionAmount = PLAN_PRICES[data.plan] / 100;
Isso envia R$ 1,00 para o Mercado Pago para plano test, mas no banco você salva em centavos.
Se o webhook espera valores em centavos para determinar o plano pelo valor pago, isso vai quebrar a lógica.

✅ Correção:
Padronize para enviar e salvar sempre em centavos. Ou adapte o webhook pra comparar float em vez de centavos.

2️⃣ Webhook salva pagamento novo em vez de atualizar o existente
No webhook você faz:

ts
Copiar
Editar
await storage.createPayment({
  userId: userId,
  mercadoPagoId: paymentId,
  ...
});
➡️ Isso gera duplicatas. O correto seria fazer um updatePaymentByReference onde externalReference ou mercadoPagoId já existisse.

✅ Correção:
Adicione um método updatePaymentStatusByReference e use isso aqui:

ts
Copiar
Editar
await storage.updatePaymentStatusByReference(paymentInfo.external_reference, {
  status: 'approved',
  mercadoPagoId: paymentId,
  transactionAmount: transactionAmountCents,
  ...
});
3️⃣ Webhook sem autenticação da assinatura
No webhook:

ts
Copiar
Editar
if (!validateWebhookSignature(...)) { return 401 }
O validateWebhookSignature atualmente retorna sempre true.

✅ Correção:
Implemente a verificação baseada na documentação oficial.

4️⃣ Inconsistência no endpoint de criação
Você tem dois endpoints:

/api/payments/create-pix

/api/payments/pix/create

Ambos fazem a mesma coisa. Isso é redundante e pode confundir no frontend.

✅ Correção:
Centralize e mantenha apenas um endpoint.

📌 Melhorias sugeridas:
🔒 Habilitar assinatura de webhook real

📊 Adicionar status de “expired” no banco se o pagamento não for aprovado em 30min (usando cronjob ou cleanup route)

📝 Logar o ID de pagamento Mercado Pago direto ao salvar

🧼 Remover payment.create se preference.create falhar (hoje isso fica sem retorno)

✅ Conclusão:
Teu fluxo está muito bem arquitetado, mas esses 4 pontos acima são cruciais pra que o sistema:

Funcione sem falha em ambientes reais

Evite duplicação de pagamentos

Tenha validação de segurança correta no webhook

Use um único endpoint consistente no frontend e backend