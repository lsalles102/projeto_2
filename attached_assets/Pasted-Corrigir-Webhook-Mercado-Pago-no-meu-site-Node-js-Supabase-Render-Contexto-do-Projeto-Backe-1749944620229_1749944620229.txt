Corrigir Webhook Mercado Pago no meu site Node.js (Supabase + Render)
üîé Contexto do Projeto:

Backend: Node.js com Express

Banco de Dados: Supabase

Deploy: Render

Frontend: Next.js + React

URL p√∫blica: https://fovdark.shop/

Pagamento: PIX via Mercado Pago (usando o SDK oficial do Mercado Pago)

O meu site vende licen√ßas de software. Quando o cliente paga, o sistema precisa gerar uma chave de ativa√ß√£o e enviar ao email do comprador.

‚ùå Problema Atual:

O endpoint /api/payments/webhook que processa os Webhooks do Mercado Pago n√£o est√° gerando licen√ßa nem enviando chave de ativa√ß√£o ao email do comprador quando o email do comprador n√£o existe ainda no Supabase.

Hoje, o c√≥digo do webhook tenta buscar o usu√°rio pelo email (getUserByEmail) e se n√£o encontrar, apenas faz log de erro e n√£o faz mais nada.

‚úÖ O que eu quero que a IA corrija:

Quero que voc√™ fa√ßa as seguintes corre√ß√µes no meu c√≥digo backend, no arquivo que define o webhook /api/payments/webhook:

‚úÖ Corre√ß√µes Obrigat√≥rias:
1. Criar o usu√°rio automaticamente se n√£o existir:
Se o email do comprador (vindo do campo paymentInfo.payer.email do Mercado Pago) n√£o existir no Supabase, o webhook deve:

‚úîÔ∏è Criar o usu√°rio na tabela de usu√°rios com:

email: igual ao recebido no webhook

username: prefixo do email (exemplo: de joao123@gmail.com, o username vira joao123)

firstName: usar o first_name que vier do Mercado Pago. Se n√£o vier, usar "Novo"

lastName: usar o last_name do Mercado Pago. Se n√£o vier, usar "Usu√°rio"

password: gerar uma senha aleat√≥ria (pode usar crypto.randomBytes(8).toString('hex') e criptografar com bcrypt)

2. Criar ou atualizar o pagamento no banco:
‚úîÔ∏è Se n√£o houver um registro de pagamento para esse paymentId ou externalReference, criar um novo pagamento no Supabase.

‚úîÔ∏è Se j√° existir e estiver como pending, atualizar o status para approved.

3. Gerar a chave de licen√ßa (activationKey):
‚úîÔ∏è Sempre que um pagamento for aprovado, criar uma nova activation key, seguindo o padr√£o:

css
Copiar
Editar
FOVD-[NOME DO PLANO]-[TIMESTAMP]-[STRING RAND√îMICA]
Exemplo:

Copiar
Editar
FOVD-15DAYS-1718398237-3F2A1C7B
4. Criar ou atualizar a licen√ßa do usu√°rio:
‚úîÔ∏è Se o usu√°rio j√° tiver uma licen√ßa ativa, renovar/estender a licen√ßa, sobrescrevendo com a nova chave, novo plano e nova data de expira√ß√£o.

‚úîÔ∏è Se ainda n√£o tiver, criar uma nova licen√ßa com status active, chave nova, e a expira√ß√£o de acordo com o plano.

Regras de expira√ß√£o:

Plano	Dura√ß√£o
test	30 minutos
7days	7 dias
15days	15 dias

5. Enviar o email de chave de licen√ßa:
‚úîÔ∏è Ap√≥s gerar a chave, o webhook deve enviar email para o comprador com a nova chave, usando a fun√ß√£o j√° existente:

ts
Copiar
Editar
sendLicenseKeyEmail(user.email, activationKey, planName);
Onde:

planName: Nome amig√°vel do plano (exemplo: "Teste (30 minutos)", "7 Dias", "15 Dias")

‚úîÔ∏è Se der erro no envio de email, n√£o quebrar o webhook, apenas logar o erro.

6. Resposta do Webhook:
‚úîÔ∏è Sempre finalizar o webhook com:

ts
Copiar
Editar
res.status(200).json({ received: true });
Mesmo se houver falha ao enviar email ou outro problema n√£o cr√≠tico, para evitar retries do Mercado Pago.

7. Logs detalhados:
‚úîÔ∏è Adicionar logs de cada etapa:

Usu√°rio encontrado ou criado

Pagamento salvo ou atualizado

Chave de ativa√ß√£o gerada

Licen√ßa criada ou renovada

Email enviado (ou falha no envio de email)

‚úÖ Extra (Se quiser fazer):
Se puder, incluir um pequeno console.warn quando o email do pagador vier vazio ou nulo no webhook.

‚úÖ Resumo final:
Corrija meu webhook /api/payments/webhook para que ele:

Crie o usu√°rio se ainda n√£o existir

Gere a chave de ativa√ß√£o

Crie ou atualize a licen√ßa

Atualize o pagamento

Envie o email com a chave

Sempre finalize com status 200, mesmo em caso de erro de email

Adicione logs detalhados em cada etapa

O backend √© Node.js + Express com Supabase.