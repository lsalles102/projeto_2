Estou tendo problemas ao enviar emails de confirmação de licença após um pagamento com Mercado Pago no meu backend Node.js. Estou usando Supabase para banco de dados e Render para deploy.

O sistema gera a chave de licença corretamente após o pagamento aprovado, mas falha ao enviar o email porque o Mercado Pago retorna emails mascarados (como "XXXXXXXXXXX"), e minha função de envio aborta quando isso acontece.

Quero que você revise e corrija o código abaixo para garantir que:

1. O email seja validado e limpo corretamente.
2. Caso o email do Mercado Pago seja inválido, o sistema tente usar o email salvo no banco via Supabase.
3. Se mesmo assim não houver email válido, ele registre um log de falha, mas não cause crash.
4. O envio de email deve ser feito via `nodemailer` com SMTP padrão (Hostinger).
5. Estou usando TypeScript.

Aqui está minha função atual de envio de email:

```ts
import nodemailer from "nodemailer";

const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT || "587"),
    secure: false,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
    tls: {
      rejectUnauthorized: false,
    },
  });
};

export async function sendLicenseKeyEmail(email: string, licenseKey: string, planName: string) {
  const transporter = createTransporter();
  const cleanedEmail = email.trim();

  if (!cleanedEmail || !cleanedEmail.includes("@") || cleanedEmail.includes("XXXXX")) {
    console.error("Email inválido ou mascarado:", email);
    throw new Error("Email inválido");
  }

  const mailOptions = {
    from: `"FovDark" <${process.env.SMTP_USER}>`,
    to: cleanedEmail,
    subject: "Sua Licença FovDark",
    html: `<p>Chave: <strong>${licenseKey}</strong> | Plano: ${planName}</p>`,
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    console.log("Email enviado:", result.messageId);
  } catch (err) {
    console.error("Erro ao enviar email:", err);
    throw new Error("Erro ao enviar email");
  }
}
