"""
FovDark Loader - PyQt6 com efeito vidro
Convers√£o do loader CustomTkinter mantendo todas as funcionalidades
"""

import sys
import os
import json
import hashlib
import uuid
import subprocess
import webbrowser
import requests
import shutil
import time

# Importa√ß√µes condicionais para Windows
try:
    import winreg
    WINDOWS_REGISTRY_AVAILABLE = True
except ImportError:
    WINDOWS_REGISTRY_AVAILABLE = False

from PyQt6.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, 
                            QLabel, QLineEdit, QPushButton, QCheckBox, QProgressBar,
                            QFrame, QGraphicsDropShadowEffect, QMessageBox)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt6.QtGui import QPalette, QColor, QPainter, QLinearGradient, QBrush

# Configura√ß√µes originais
API_URL = "https://fovdark.shop"
EXECUTAVEL_NOME = "svchost.exe"
LOGIN_FILE = os.path.join(os.getenv("APPDATA"), "darkfov_login.json")

def gerar_hwid():
    """Gera HWID √∫nico baseado no hardware do computador"""
    raw = str(uuid.getnode()) + os.getenv("COMPUTERNAME", "") + os.getenv("USERNAME", "")
    return hashlib.sha256(raw.encode()).hexdigest()

def salvar_hwid_no_registro(hwid):
    """Salva HWID no registro do Windows"""
    if WINDOWS_REGISTRY_AVAILABLE:
        try:
            chave = winreg.CreateKey(winreg.HKEY_CURRENT_USER, r"Software\\FovDark")
            winreg.SetValueEx(chave, "HWID", 0, winreg.REG_SZ, hwid)
            winreg.CloseKey(chave)
        except Exception:
            pass

def salvar_login_local(email, senha):
    """Salva credenciais de login localmente"""
    try:
        with open(LOGIN_FILE, "w") as f:
            json.dump({"email": email, "senha": senha}, f)
    except Exception:
        pass

def carregar_login_local():
    """Carrega credenciais salvas"""
    try:
        if os.path.exists(LOGIN_FILE):
            with open(LOGIN_FILE, "r") as f:
                dados = json.load(f)
                return dados.get("email", ""), dados.get("senha", "")
    except Exception:
        pass
    return "", ""

def remover_atalhos_autohotkey():
    """Remove atalhos do AutoHotkey"""
    pasta_startmenu = os.path.expandvars(r'%APPDATA%\Microsoft\Windows\Start Menu\Programs\AutoHotkey')
    if os.path.exists(pasta_startmenu):
        try:
            shutil.rmtree(pasta_startmenu, ignore_errors=True)
        except Exception as e:
            print(f"Erro ao remover atalhos do Start Menu: {e}")

def verificar_autohotkey_instalado():
    """Verifica se AutoHotkey est√° instalado"""
    if not WINDOWS_REGISTRY_AVAILABLE:
        return False
    
    try:
        with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\AutoHotkey") as chave:
            install_dir, _ = winreg.QueryValueEx(chave, "InstallDir")
            if os.path.exists(os.path.join(install_dir, "AutoHotkey.exe")):
                return True
    except FileNotFoundError:
        pass

    try:
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"SOFTWARE\AutoHotkey") as chave:
            install_dir, _ = winreg.QueryValueEx(chave, "InstallDir")
            if os.path.exists(os.path.join(install_dir, "AutoHotkey.exe")):
                return True
    except FileNotFoundError:
        pass

    return False

def instalar_autohotkey_silencioso():
    """Instala AutoHotkey silenciosamente"""
    try:
        url_instalador = "https://tkghgqliyjtovttpuael.supabase.co/storage/v1/object/sign/arquivos/Dependencias.exe?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9lYzBjODc1ZS05NThmLTQyMGMtYjY3OS1lNDkxYTdmNmNhZWMiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhcnF1aXZvcy9EZXBlbmRlbmNpYXMuZXhlIiwiaWF0IjoxNzQ5ODY3MDUyLCJleHAiOjE3ODE0MDMwNTJ9.81mM4INF_HS1Kt_E9lxRjrsIAl6fQI6HL0dReYt0SRA"
        temp_dir = os.path.join(os.getenv("APPDATA"), "darkfov_temp")
        os.makedirs(temp_dir, exist_ok=True)
        instalador_path = os.path.join(temp_dir, "ahk-install.exe")

        if not os.path.exists(instalador_path):
            res = requests.get(url_instalador)
            if res.status_code != 200:
                return False
            with open(instalador_path, "wb") as f:
                f.write(res.content)

        subprocess.run([instalador_path, "/S", "/NoDesktopIcon", "/NoStartMenu", "/NoQuickLaunch"], shell=True)
        remover_atalhos_autohotkey()
        return True
    except Exception:
        return False

def abrir_site_renovacao():
    """Abre o site de renova√ß√£o de licen√ßa"""
    url_renovacao = "https://fovdark.shop/comprar"
    webbrowser.open(url_renovacao)

class LoginWorker(QThread):
    """Thread para processo de login com progresso"""
    progress = pyqtSignal(int)
    status = pyqtSignal(str)
    finished = pyqtSignal(bool, str)
    
    def __init__(self, email, senha):
        super().__init__()
        self.email = email
        self.senha = senha
    
    def run(self):
        try:
            self.status.emit("Conectando ao servidor...")
            self.progress.emit(20)
            
            # Login
            r = requests.post(f"{API_URL}/api/auth/login", 
                             json={"email": self.email, "password": self.senha}, 
                             headers={"Content-Type": "application/json"},
                             timeout=10)
            
            if r.status_code != 200:
                self.finished.emit(False, "Credenciais inv√°lidas.")
                return
            
            self.progress.emit(50)
            self.status.emit("Verificando licen√ßa...")
            
            token = r.json()["token"]
            headers = {"Authorization": f"Bearer {token}"}
            hwid_atual = gerar_hwid()
            
            # Verificar licen√ßa
            r2 = requests.get(f"{API_URL}/api/license/check", headers=headers, timeout=10)
            if r2.status_code != 200:
                self.finished.emit(False, f"Erro ao checar licen√ßa.\nStatus: {r2.status_code}")
                return
            
            dados_licenca = r2.json()
            if not dados_licenca.get("valid", False):
                self.finished.emit(False, "LICENSE_EXPIRED:Licen√ßa expirada ou inv√°lida.\nRenove para continuar.")
                return
            
            self.progress.emit(80)
            self.status.emit("Validando hardware...")
            
            # Salvar HWID
            res_hwid = requests.post(f"{API_URL}/api/hwid/save", 
                                   json={"hwid": hwid_atual}, 
                                   headers=headers, timeout=10)
            
            if res_hwid.status_code != 200:
                self.finished.emit(False, "üö® Acesso N√£o Autorizado.\n"
                                         "Detectamos uma tentativa de uso com Pc n√£o autorizado.\n\n"
                                         "Isso pode indicar tentativa de compartilhamento de conta ou uso indevido.\n"
                                         "Seu acesso poder√° ser bloqueado ap√≥s m√∫ltiplas tentativas.")
                return
            
            self.progress.emit(100)
            
            # Salvar HWID no registro
            salvar_hwid_no_registro(hwid_atual)
            
            dias = dados_licenca.get("days_remaining", "??")
            self.finished.emit(True, f"Licen√ßa ativa! Dias restantes: {dias}")
            
        except requests.exceptions.Timeout:
            self.finished.emit(False, "Tempo limite de conex√£o excedido.")
        except requests.exceptions.ConnectionError:
            self.finished.emit(False, "Erro de conex√£o com o servidor.")
        except Exception as e:
            self.finished.emit(False, f"Erro de conex√£o: {e}")

class ExecuteWorker(QThread):
    """Thread para execu√ß√£o do script com progresso"""
    progress = pyqtSignal(int)
    status = pyqtSignal(str)
    finished = pyqtSignal(bool, str)
    
    def run(self):
        try:
            self.status.emit("Verificando depend√™ncias...")
            self.progress.emit(25)
            
            if not verificar_autohotkey_instalado():
                self.status.emit("Instalando AutoHotkey...")
                if not instalar_autohotkey_silencioso():
                    self.finished.emit(False, "Falha na instala√ß√£o do AutoHotkey.")
                    return
            
            self.progress.emit(50)
            self.status.emit("Baixando execut√°vel...")
            
            url = "https://tkghgqliyjtovttpuael.supabase.co/storage/v1/object/sign/arquivos/auto_recoil.exe?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9lYzBjODc1ZS05NThmLTQyMGMtYjY3OS1lNDkxYTdmNmNhZWMiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhcnF1aXZvcy9hdXRvX3JlY29pbC5leGUiLCJpYXQiOjE3NDk4NjcwNjksImV4cCI6MTc4MTQwMzA2OX0.o4tfCzmYWjL863yd9s-WvfNt9PNKRQRFvvjlZDoNhuE"
            res = requests.get(url, timeout=30)
            
            if res.status_code != 200:
                self.finished.emit(False, "Falha ao baixar o execut√°vel.")
                return
            
            self.progress.emit(75)
            self.status.emit("Executando script...")
            
            temp_dir = os.path.join(os.getenv("APPDATA"), "Microsoft Edge", "Temp")
            os.makedirs(temp_dir, exist_ok=True)
            exe_path = os.path.join(temp_dir, EXECUTAVEL_NOME)
            
            with open(exe_path, "wb") as f:
                f.write(res.content)
            
            # Ocultar arquivo e executar
            subprocess.call(['attrib', '+H', exe_path])
            subprocess.Popen(exe_path, shell=True)
            
            self.progress.emit(100)
            self.finished.emit(True, "Script executado com sucesso!")
            
        except Exception as e:
            self.finished.emit(False, f"Erro ao executar: {e}")

class FovDarkLoader(QWidget):
    """Loader principal com efeito de vidro PyQt6"""
    
    def __init__(self):
        super().__init__()
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint)
        self.setFixedSize(350, 420)
        self.center_window()
        
        self.setup_ui()
        self.load_saved_credentials()
        
        # Efeito de sombra para vidro
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(25)
        shadow.setColor(QColor(0, 255, 247, 60))
        shadow.setOffset(0, 0)
        self.setGraphicsEffect(shadow)
        
        self._drag_pos = None
    
    def center_window(self):
        """Centraliza a janela na tela"""
        screen = QApplication.primaryScreen().geometry()
        x = (screen.width() - self.width()) // 2
        y = (screen.height() - self.height()) // 2
        self.move(x, y)
    
    def paintEvent(self, event):
        """Desenha o fundo com efeito de vidro"""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        # Gradiente principal para efeito vidro
        gradient = QLinearGradient(0, 0, 0, self.height())
        gradient.setColorAt(0, QColor(10, 10, 15, 220))
        gradient.setColorAt(1, QColor(26, 26, 46, 180))
        
        brush = QBrush(gradient)
        painter.setBrush(brush)
        painter.setPen(QColor(0, 255, 247, 80))
        painter.drawRoundedRect(self.rect(), 15, 15)
    
    def setup_ui(self):
        """Configura a interface do usu√°rio"""
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Topbar personalizada
        self.create_topbar(layout)
        
        # Conte√∫do principal
        main_frame = QFrame()
        main_frame.setStyleSheet("""
            QFrame {
                background: transparent;
                border-radius: 10px;
                margin: 20px;
            }
        """)
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)
        
        # Logo
        logo = QLabel("FovDark")
        logo.setAlignment(Qt.AlignmentFlag.AlignCenter)
        logo.setStyleSheet("color: #00fff7; font-size: 24px; font-weight: bold; font-family: 'Orbitron';")
        main_layout.addWidget(logo)
        
        # Campos de entrada
        self.entry_email = QLineEdit()
        self.entry_email.setPlaceholderText("Email")
        self.entry_email.setFixedHeight(35)
        self.entry_email.setStyleSheet(self.get_input_style())
        main_layout.addWidget(self.entry_email)
        
        self.entry_senha = QLineEdit()
        self.entry_senha.setPlaceholderText("Senha")
        self.entry_senha.setEchoMode(QLineEdit.EchoMode.Password)
        self.entry_senha.setFixedHeight(35)
        self.entry_senha.setStyleSheet(self.get_input_style())
        main_layout.addWidget(self.entry_senha)
        
        # Checkbox lembrar
        self.check_salvar = QCheckBox("Lembrar login")
        self.check_salvar.setStyleSheet("""
            QCheckBox {
                color: #cccccc;
                font-size: 12px;
                spacing: 8px;
            }
            QCheckBox::indicator {
                width: 16px;
                height: 16px;
                border-radius: 2px;
            }
            QCheckBox::indicator:unchecked {
                background: #0a0a0f;
                border: 2px solid #333366;
            }
            QCheckBox::indicator:checked {
                background: #00fff7;
                border: 2px solid #00fff7;
            }
        """)
        main_layout.addWidget(self.check_salvar)
        
        # Barra de progresso
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setFixedHeight(20)
        self.progress_bar.setStyleSheet(self.get_progress_style())
        main_layout.addWidget(self.progress_bar)
        
        # Label de status
        self.status_label = QLabel("")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("color: #00fff7; font-size: 11px;")
        self.status_label.setVisible(False)
        main_layout.addWidget(self.status_label)
        
        # Bot√£o Login
        self.btn_login = QPushButton("Entrar")
        self.btn_login.setFixedHeight(40)
        self.btn_login.setStyleSheet(self.get_button_style("#00fff7", "#00cccc"))
        self.btn_login.clicked.connect(self.login)
        main_layout.addWidget(self.btn_login)
        
        # Bot√£o Executar (oculto inicialmente)
        self.btn_executar = QPushButton("Executar Script")
        self.btn_executar.setFixedHeight(40)
        self.btn_executar.setStyleSheet(self.get_button_style("#44ff44", "#33cc33"))
        self.btn_executar.clicked.connect(self.executar_script)
        self.btn_executar.setVisible(False)
        main_layout.addWidget(self.btn_executar)
        
        # Bot√£o Renovar (oculto inicialmente)
        self.btn_renovar = QPushButton("Renovar Licen√ßa")
        self.btn_renovar.setFixedHeight(38)
        self.btn_renovar.setStyleSheet(self.get_button_style("#9c27b0", "#7b1fa2"))
        self.btn_renovar.clicked.connect(abrir_site_renovacao)
        self.btn_renovar.setVisible(False)
        main_layout.addWidget(self.btn_renovar)
        
        main_frame.setLayout(main_layout)
        layout.addWidget(main_frame)
        
        # Footer
        footer = QLabel("¬© 2025 FovDark")
        footer.setAlignment(Qt.AlignmentFlag.AlignCenter)
        footer.setStyleSheet("color: #666666; font-size: 10px; font-family: 'Orbitron'; margin: 5px;")
        layout.addWidget(footer)
        
        self.setLayout(layout)
    
    def create_topbar(self, layout):
        """Cria a topbar personalizada"""
        topbar = QFrame()
        topbar.setFixedHeight(35)
        topbar.setStyleSheet("background: #0a0a0f; border-radius: 15px 15px 0 0;")
        topbar_layout = QHBoxLayout()
        topbar_layout.setContentsMargins(10, 5, 5, 5)
        
        # Espa√ßo vazio para arrastar
        spacer = QLabel("")
        topbar_layout.addWidget(spacer)
        
        # Bot√µes de controle
        btn_front = QPushButton("^")
        btn_front.setFixedSize(25, 25)
        btn_front.setStyleSheet(self.get_control_button_style())
        btn_front.clicked.connect(self.trazer_para_frente)
        topbar_layout.addWidget(btn_front)
        
        btn_min = QPushButton("v")
        btn_min.setFixedSize(25, 25)
        btn_min.setStyleSheet(self.get_control_button_style())
        btn_min.clicked.connect(self.minimizar_janela)
        topbar_layout.addWidget(btn_min)
        
        btn_close = QPushButton("‚úï")
        btn_close.setFixedSize(25, 25)
        btn_close.setStyleSheet(self.get_control_button_style())
        btn_close.clicked.connect(self.close)
        topbar_layout.addWidget(btn_close)
        
        topbar.setLayout(topbar_layout)
        layout.addWidget(topbar)
        
        # Funcionalidade de arrastar
        topbar.mousePressEvent = self.mouse_press_event
        topbar.mouseMoveEvent = self.mouse_move_event
        spacer.mousePressEvent = self.mouse_press_event
        spacer.mouseMoveEvent = self.mouse_move_event
    
    def get_input_style(self):
        """Retorna o estilo para campos de entrada"""
        return """
            QLineEdit {
                background: rgba(10, 10, 15, 180);
                border: 1px solid #333366;
                border-radius: 8px;
                padding: 8px;
                color: #ffffff;
                font-size: 12px;
            }
            QLineEdit:focus {
                border: 1px solid #00fff7;
                background: rgba(10, 10, 15, 220);
            }
        """
    
    def get_button_style(self, bg_color, hover_color):
        """Retorna o estilo para bot√µes"""
        return f"""
            QPushButton {{
                background: {bg_color};
                color: #000000;
                border: none;
                border-radius: 8px;
                font-size: 13px;
                font-weight: bold;
                padding: 10px;
            }}
            QPushButton:hover {{
                background: {hover_color};
            }}
            QPushButton:pressed {{
                background: {bg_color};
            }}
            QPushButton:disabled {{
                background: #444444;
                color: #888888;
            }}
        """
    
    def get_control_button_style(self):
        """Retorna o estilo para bot√µes de controle"""
        return """
            QPushButton {
                background: transparent;
                color: #ffffff;
                border: none;
                font-size: 12px;
            }
            QPushButton:hover {
                background: #333366;
                border-radius: 12px;
            }
        """
    
    def get_progress_style(self):
        """Retorna o estilo para barra de progresso"""
        return """
            QProgressBar {
                border: 1px solid #333366;
                border-radius: 10px;
                background: rgba(10, 10, 15, 180);
                text-align: center;
                color: #ffffff;
                font-size: 11px;
                font-weight: bold;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #00fff7, stop:0.5 #44ff44, stop:1 #9c27b0);
                border-radius: 8px;
            }
        """
    
    def mouse_press_event(self, event):
        """Inicia o arraste da janela"""
        if event.button() == Qt.MouseButton.LeftButton:
            self._drag_pos = event.globalPosition().toPoint()
    
    def mouse_move_event(self, event):
        """Move a janela durante o arraste"""
        if event.buttons() == Qt.MouseButton.LeftButton and self._drag_pos:
            self.move(self.pos() + event.globalPosition().toPoint() - self._drag_pos)
            self._drag_pos = event.globalPosition().toPoint()
    
    def minimizar_janela(self):
        """Minimiza a janela"""
        self.showMinimized()
    
    def trazer_para_frente(self):
        """Traz a janela para frente"""
        self.raise_()
        self.activateWindow()
    
    def load_saved_credentials(self):
        """Carrega credenciais salvas"""
        email_salvo, senha_salva = carregar_login_local()
        if email_salvo:
            self.entry_email.setText(email_salvo)
            self.entry_senha.setText(senha_salva)
            self.check_salvar.setChecked(True)
    
    def show_progress(self, show=True):
        """Mostra/oculta a barra de progresso"""
        self.progress_bar.setVisible(show)
        self.status_label.setVisible(show)
        if not show:
            self.progress_bar.setValue(0)
            self.status_label.setText("")
    
    def show_message(self, title, message, icon=QMessageBox.Icon.Information):
        """Exibe mensagem com cores neon vis√≠veis"""
        msg = QMessageBox()
        msg.setIcon(icon)
        msg.setWindowTitle(title)
        msg.setText(message)
        
        # Cores neon baseadas no tipo de mensagem
        if icon == QMessageBox.Icon.Critical:
            title_color = "#ff3366"  # Vermelho neon
            text_color = "#ffccdd"   # Rosa claro
            button_color = "#ff3366"
        elif icon == QMessageBox.Icon.Warning:
            title_color = "#ffaa00"  # Laranja neon
            text_color = "#ffeecc"   # Amarelo claro
            button_color = "#ffaa00"
        else:  # Information/Success
            title_color = "#00fff7"  # Ciano neon
            text_color = "#ccffff"   # Ciano claro
            button_color = "#00fff7"
        
        msg.setStyleSheet(f"""
            QMessageBox {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 rgba(20, 20, 30, 240),
                    stop:1 rgba(10, 10, 20, 220));
                color: {text_color};
                border: 2px solid {title_color};
                border-radius: 12px;
                font-size: 13px;
                font-weight: 500;
            }}
            QMessageBox QLabel {{
                color: {text_color};
                font-size: 13px;
                font-weight: 600;
                padding: 10px;
                text-shadow: 0 0 8px {title_color};
            }}
            QMessageBox QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 {button_color},
                    stop:1 rgba(0, 100, 150, 200));
                color: #000000;
                border: 1px solid {title_color};
                border-radius: 8px;
                padding: 10px 20px;
                font-weight: bold;
                font-size: 12px;
                text-shadow: none;
                box-shadow: 0 0 10px {title_color};
            }}
            QMessageBox QPushButton:hover {{
                background: {title_color};
                box-shadow: 0 0 15px {title_color};
                transform: scale(1.05);
            }}
            QMessageBox QPushButton:pressed {{
                background: rgba(0, 150, 200, 180);
            }}
        """)
        msg.exec()
    
    def login(self):
        """Executa o processo de login"""
        email = self.entry_email.text().strip()
        senha = self.entry_senha.text().strip()
        
        if not email or not senha:
            self.show_message("Erro", "Preencha email e senha.", QMessageBox.Icon.Critical)
            return
        
        self.btn_login.setEnabled(False)
        self.btn_login.setText("Conectando...")
        self.show_progress(True)
        
        self.login_worker = LoginWorker(email, senha)
        self.login_worker.progress.connect(self.progress_bar.setValue)
        self.login_worker.status.connect(self.status_label.setText)
        self.login_worker.finished.connect(self.login_finished)
        self.login_worker.start()
    
    def login_finished(self, success, message):
        """Finaliza o processo de login"""
        self.btn_login.setEnabled(True)
        self.btn_login.setText("Entrar")
        self.show_progress(False)
        
        if success:
            self.show_message("Sucesso", message, QMessageBox.Icon.Information)
            self.btn_executar.setVisible(True)
            self.btn_renovar.setVisible(True)
            
            # Salvar credenciais se marcado
            if self.check_salvar.isChecked():
                salvar_login_local(self.entry_email.text(), self.entry_senha.text())
            elif os.path.exists(LOGIN_FILE):
                os.remove(LOGIN_FILE)
        else:
            # Verificar se √© licen√ßa expirada
            if message.startswith("LICENSE_EXPIRED:"):
                clean_message = message.replace("LICENSE_EXPIRED:", "")
                self.show_message("Licen√ßa Expirada", clean_message, QMessageBox.Icon.Warning)
                # Mostrar bot√£o renovar para licen√ßas expiradas
                self.btn_renovar.setVisible(True)
            else:
                self.show_message("Erro", message, QMessageBox.Icon.Critical)
    
    def executar_script(self):
        """Executa o script principal"""
        self.btn_executar.setEnabled(False)
        self.btn_executar.setText("Executando...")
        self.show_progress(True)
        
        self.execute_worker = ExecuteWorker()
        self.execute_worker.progress.connect(self.progress_bar.setValue)
        self.execute_worker.status.connect(self.status_label.setText)
        self.execute_worker.finished.connect(self.execute_finished)
        self.execute_worker.start()
    
    def execute_finished(self, success, message):
        """Finaliza o processo de execu√ß√£o"""
        self.btn_executar.setEnabled(True)
        self.btn_executar.setText("Executar Script")
        self.show_progress(False)
        
        if success:
            self.show_message("Sucesso", message, QMessageBox.Icon.Information)
        else:
            self.show_message("Erro", message, QMessageBox.Icon.Critical)

def main():
    """Fun√ß√£o principal"""
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(True)
    
    # Configurar tema escuro
    app.setStyleSheet("""
        QApplication {
            background-color: #0a0a0f;
            color: #ffffff;
        }
    """)
    
    loader = FovDarkLoader()
    loader.show()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()